# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on: 
  workflow_dispatch: 

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Create Branch Date
      run: |
        echo "Branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
        echo "Date=$(date +'%d-%m-%y')" >> $GITHUB_ENV

    - name: Check Branch Date
      run: |
        echo "Branch= ${{ env.Branch }}"
        echo "Date= ${{ env.Date }}"

    - name: Define Tag
      run: |
        IMAGE_NAME="sharmanayan/abc"
        TAG="${{ env.BRANCH }}-${{ env.DATE }}"
        DOCKERHUB_TAGS=$(curl -s -H "Authorization: Bearer dckr_pat_ynxOJfBS7qKogS2cQVD78HUTto0" "https://hub.docker.com/v2/repositories/$IMAGE_NAME/tags?page_size=10" | jq -r '.results[].name' | awk '{print $NF}')
        echo "Docker tags: $DOCKERHUB_TAGS"
#        if [ -n "$DOCKERHUB_TAGS" ]; then
#          NUMERIC_TAG="${DOCKERHUB_TAGS##*.}"
#          echo "NUMERIC TAG: "$NUMERIC_TAG"
#          NUMERIC_TAG=$((NUMERIC_TAG + 1))
#          echo "NUMERIC TAG: "$NUMERIC_TAG"
#          DOCKER_TAG="$IMAGE_NAME:$TAG.${{ env.BRANCH }}-${{ env.DATE }}.$NUMERIC_TAG"
#          echo "FINAL TAG: $DOCKER_TAG"
#          echo "$DOCKER_TAG=$DOCKER_TAG"  >> $GITHUB_ENV
#        else
#          DOCKER_TAG=$IMAGE_NAME:$TAG.${{ env.BRANCH }}-${{ env.DATE }}.1"
#          echo "FINAL TAG: $DOCKER_TAG"
#          echo "$DOCKER_TAG=$DOCKER_TAG" >> $GITHUB_ENV
#        fi

#    - name: Build with Maven
#      run: mvn clean install
